{\rtf1\ansi\ansicpg936\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 STHeitiSC-Light;\f2\fswiss\fcharset0 Helvetica-Light;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red255\green83\blue8;\red255\green39\blue18;
\red0\green61\blue204;\red198\green50\blue253;\red134\green205\blue77;\red253\green154\blue0;\red253\green165\blue49;
\red254\green112\blue56;\red46\green111\blue253;\red0\green41\blue57;\red163\green217\blue121;\red174\green0\blue240;
\red102\green177\blue50;\red252\green189\blue0;\red133\green0\blue175;\red253\green193\blue49;\red222\green239\blue83;
\red230\green87\blue141;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15500\viewh9540\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs48 \cf0 \
=====================================================\
\

\f1 \'a1\'be\'d5\'fd\'c4\'dc\'c1\'bf
\f0 ++
\f1 \'a1\'bf\'c3\'bf\'cc\'ec\'bd\'d0\'d0\'d1\'c4\'e3\'b5\'c4\'b2\'bb\'d3\'a6\'b8\'c3\'ca\'c7\'c4\'d6\'d6\'d3\'a3\'ac\'b6\'f8\'ca\'c7\'c3\'ce\'cf\'eb
\f0 !\
\
=====================================================\
\

\f1 \'a1\'be\'d6\'aa\'ca\'b6\'b8\'b4\'cf\'b0\'a1\'bf
\f0 \
\
    //OC    
\f1 \'b3\'c9\'d4\'b1\'b1\'e4\'c1\'bf
\f0       
\f1 \'b3\'c9\'d4\'b1\'b7\'bd\'b7\'a8        
\f0 \
\
	
\f1 \'bd\'e1\'b9\'b9\'cc\'e5
\f0  \
	\cf2 struct   +  
\f1 \'bd\'e1\'b9\'b9\'cc\'e5\'b1\'ea\'c7\'a9
\f0 \cf0           union           enum\
	\{\
		\
	\}
\f1 \cb3 \'a3\'bb
\f0 \cb1 \
\
	\cb2 .
\f1 \cb1 \'d4\'cb\'cb\'e3\'b7\'fb
\f0 \
	\cf4 ->\cf0     (*p).\
\
	
\f1 \cf5 \'bd\'e1\'b9\'b9\'cc\'e5\cf0 \'d3\'eb\cf4 \'ba\'af\'ca\'fd
\f0 \cf0 \
	struct bir\
	\{\
		int y;\
		int m;\
	\}\
\
	struct stu\
	\{\
		struct bri *b;\
	\}\
\
	struct bir b = 0;\
\
	struct stu  s;\
	 \
	struct test\
	\{\
		short b;\
		int a ;\
		char c;\
		char num[100];\
	\}\
\
	union\
	\{\
		short b;\
		int a ;\
		char c;	\
	\}\
\
	same\
	dec \
\
	int strcmp\
	\cf6 enum  clo\cf0 \
	\{\
		RED,\
		BLACK,\
		GREY\
	\};\
\
	enum   \
	\{\
		RED=19999,\cb7 //
\f1 \'d4\'da\'d5\'e2\'c0\'ef\'ca\'c7\'bf\'c9\'d2\'d4\'b5\'c4\'a3\'ac\'d4\'damain\'ba\'af\'ca\'fd\'d6\'d0\'b2\'bb\'c4\'dc\'b8\'f8\'b3\'a3\'c1\'bf\'b8\'b3\'d6\'b5
\f0 \cb1 \
		BLACK,\
		GREY\
	\};\
\
========================day13(
\f1 \'cf\'c2
\f0 )======================\
\
  
\f1 \'a1\'be\'b4\'f3\'b8\'d9\'d6\'aa\'ca\'b6\'b5\'e3\'a1\'bf
\f0 \
\
	1.
\f1 \'ca\'fd\'be\'dd\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'b5\'c4\cb8 \'b4\'e6\'b4\'a2\cb1 \'d3\'eb\'b7\'d6\'b2\'bc\
					\'d4\'ad\'c2\'eb\'a1\'a2\'b7\'b4\'c2\'eb     \'a1\'aa\'a1\'aa\'a1\'aa> \'b2\'b9\'c2\'eb\
\
	
\f0 \
	2.
\f1 \'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b9\'dc\'c0\'ed     \'a3\'a8\'b6\'d1\'c4\'da\'b4\'e6\'a3\'a9\

\f0 \
	3.
\f1 \'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4
\f0 \cb6 malloc
\f1 \cb1 \'ba\'cd
\f0 \cb6 realloc
\f1 \'ba\'af\'ca\'fd\cb1 \'ca\'b9\'d3\'c3\'ba\'cd\'d7\'a2\'d2\'e2\'ca\'c2\'cf\'ee\

\f0 \
	4.free
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3    \'a1\'be\'ca\'cd\'b7\'c5\'a1\'bf\

\f0 \
   	5.
\f1 \cf2 \'b6\'d1\'ba\'cd\'d5\'bb\'b5\'c4\'c7\'f8\'b1\'f0\cf0 \

\f0 \
	6.
\f1 \'b3\'a3\'d3\'c3\'c4\'da\'b4\'e6\'b2\'d9\'d7\'f7\'ba\'af\'ca\'fd
\f0 \
\
=======================day13===========================\
\
int * func(int a)\
\{\
      return &a;      \
\}       \
\
//
\f1 \'ce\'ca\'cc\'e2\'d4\'da\'c4\'c4\'c0\'ef\'a3\'bf
\f0      (1_inn_var.c)\
\
\

\f1 \'a1\'be\'ca\'fd\'be\'dd\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'b5\'c4\'b4\'e6\'b4\'a2\'d3\'eb\'b7\'d6\'b2\'bc\'a1\'bf
\f0 \
\

\f1 \'d2\'bb\'a1\'a2
\f0 C
\f1 \'d3\'ef\'d1\'d4\'d6\'d0\'b5\'c4\cb7 \'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\cb1 \'ba\'cd\cb7 \'b6\'af\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 \cb1 \
	\
	
\f1 \'d2\'bb\'b8\'f6
\f0 C
\f1 \'d3\'ef\'d1\'d4\'bd\'f8\'b3\'cc\'b5\'c4\'c4\'da\'b4\'e6\'d3\'b3\'cf\'f1\'bf\'c9\'d2\'d4\'b7\'d6\'ce\'aa\'cb\'c4\'b2\'bf\'b7\'d6
\f0 :\
 	1
\f1 \'a3\'a9\'d3\'c3\'bb\'a7\'c7\'f8\'a3\'bb\
	2\'a3\'a9\'b9\'b2\'cf\'ed\'bf\'e2\'b5\'c4\'d3\'b3\'c9\'e4\'c7\'f8\'d3\'f2\'a3\'bb\
	3\'a3\'a9\'c3\'fc\'c1\'ee\'d0\'d0\'b2\'ce\'ca\'fd\'d3\'eb\'bb\'b7\'be\'b3\'b1\'e4\'c1\'bf\'a3\'bb\
	4\'a3\'a9\'ce\'b4\'ca\'b9\'d3\'c3\'c7\'f8\'a1\'a3
\f0 \
\
	
\f1 \'c6\'e4\'d6\'d0
\f0 \'93
\f1 \'d3\'c3\'bb\'a7\'c7\'f8
\f0 \'94
\f1 \'ca\'c7
\f0 c
\f1 \'d3\'ef\'d1\'d4\'d6\'d0\cf2 \'d7\'a8\'c3\'c5\'b4\'e6\'b7\'c5\'ca\'fd\'be\'dd\'b5\'c4\'c4\'da\'b4\'e6\'c7\'f8\'d3\'f2\'a1\'a3
\f0 \cf0 \
	
\f1 \'b8\'c3\'c4\'da\'b4\'e6\'c7\'f8\'d3\'f2\'d6\'f7\'d2\'aa\'b7\'d6\'ce\'aa\'c8\'fd\'c0\'e0\'a3\'ba\
	1\'a3\'a9\'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\'a3\'bb\
	2\'a3\'a9\'b6\'af\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\'a3\'bb\
	3\'a3\'a9\'b4\'fa\'c2\'eb\'c7\'f8
\f0 (
\f1 \'bb\'f2\'bd\'d0\'b3\'cc\'d0\'f2\'c7\'f8
\f0 )
\f1 \'a1\'a3
\f0 \
\
1> 
\f1 \cb9 \'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 :\cb1 \
\
		1
\f1 \'a3\'a9\'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\'d3\'d6\'b7\'d6\'ce\'aa\'a3\'ba\
			1> \'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'a3\'a8
\f0 READONLY  DATA
\f1 \'a3\'a9\'c7\'f8;\
			2> \'ca\'fd\'be\'dd\'a3\'a8
\f0 RW DATA
\f1 \'a3\'a9\'c7\'f8\'a1\'a3
\f0 \
\
		2
\f1 \'a3\'a9\'b9\'b2\'cd\'ac\'cc\'d8\'d5\'f7\'a3\'ba
\f0 \
			1> 
\f1 \'cb\'fc\'c3\'c7\'b6\'bc\'ca\'c7\'d4\'da\cf4 \'b3\'cc\'d0\'f2\'b1\'e0\'d2\'eb\'c1\'ac\'bd\'d3\'bd\'d7\'b6\'ce\'c8\'b7\'b6\'a8\cf0 \'b5\'c4;\
			2> \'d4\'da\'b3\'cc\'d0\'f2\'d6\'b4\'d0\'d0\'b5\'c4\'bd\'d7\'b6\'ce\'b2\'bb\'bb\'e1\'b8\'c4\'b1\'e4\'a3\'bb\

\f0 \
		3
\f1 \'a3\'a9\'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'c7\'f8\'a3\'ba
\f0 \
			1> \'93
\f1 \'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'c7\'f8
\f0 \'94
\f1 \'d6\'f7\'d2\'aa\'ca\'c7\'b3\'a3\'c1\'bf\'c7\'f8
\f0 (\cf4 .rodata
\f1 \'b6\'ce
\f0 \cf0 );\
			2> 
\f1 \'b3\'a3\'c1\'bf\'bb\'f2\'b3\'a3\'c1\'bf\'d7\'d6\'b7\'fb\'b4\'ae\'be\'cd\'b4\'e6\'b4\'a2\'d4\'da\'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'c7\'f8\'a1\'a3
\f0 \
\
		4
\f1 \'a3\'a9\'b6\'c1\'d0\'b4\'ca\'fd\'be\'dd\'c7\'f8\'a3\'ba
\f0 \
			1> 
\f1 \'b8\'f9\'be\'dd\cb3 \'be\'b2\'cc\'ac\'b1\'e4\'c1\'bf\cb1 \'bb\'f2\cb3 \'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\cb1 \'ca\'c7\'b7\'f1\'b3\'f5\'ca\'bc\'bb\'af\'b7\'d6\'ce\'aa\
				
\f0 \'93.bss
\f1 \'b6\'ce
\f0 (
\f1 \'ce\'b4\'b3\'f5\'ca\'bc\'bb\'af
\f0 )\'94
\f1 \'d3\'eb
\f0 \'93.data
\f1 \'b6\'ce
\f0 (
\f1 \'b3\'f5\'ca\'bc\'bb\'af
\f0 ),
\f1 \'d3\'d6\'bd\'d0\'ca\'fd\'be\'dd\'b6\'ce
\f0 \'94
\f1 \'a1\'a3\
\
			2> 
\f0\fs46 BSS
\f1 \'a3\'a8
\f0 Block Started by Symbol
\f1 \'a3\'a9\'a1\'a3\'d4\'da\'b3\'cc\'d0\'f2\'d6\'b4\'d0\'d0\'d6\'ae\'c7\'b0
\f0 BSS
\f1 \'b6\'ce\'bb\'e1\
				\cf5 \'d7\'d4\'b6\'af\'c7\'e5
\f0 0
\f1 \cf0 \'a1\'a3\'cb\'f9\'d2\'d4\'a3\'ac\'ce\'b4\'b3\'f5\'ca\'bc\'b5\'c4\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'d4\'da\'b3\'cc\'d0\'f2\'d6\'b4\'d0\'d0\'d6\'ae\'c7\'b0\'d2\'d1\'be\'ad\'b3\'c9
\f0 0
\f1 \'c1\'cb\'a1\'a3\

\f0 \

\fs48 2> 
\f1 \cb9 \'b6\'af\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 :\cb1  \
\
		1) 
\f1 \'b7\'d6\'ce\'aa\'b6\'d1\'c7\'f8\'ba\'cd\'d5\'bb\'c7\'f8\'a1\'a3
\f0 \
\
		2) 
\f1 \'b6\'bc\'ca\'c7\'b3\'cc\'d0\'f2\'d6\'b4\'d0\'d0\'b5\'c4\'b9\'fd\'b3\'cc\'d6\'d0
\f0 \'93
\f1 \'b6\'af\'cc\'ac\'b4\'e6\'b4\'a2
\f0 \'94
\f1 \'b5\'c4\'a3\'ac\'b4\'f3\'d0\'a1\'d2\'b2\'cb\'e6\'d6\'ae\'b6\'af\'cc\'ac\'b1\'e4\'bb\'af\'a1\'a3
\f0 \
\
		3) 
\f1 \'b4\'d3\'c4\'da\'b4\'e6\'b9\'dc\'c0\'ed\'b5\'c4\'ca\'b5\'cf\'d6\'b5\'c4\'bd\'c7\'b6\'c8\'bf\'b4\'a3\'ba\
			1>  \'b6\'d1\'ca\'c7\'ca\'b9\'d3\'c3\cb10 \'c1\'b4\'b1\'ed\'ca\'b5\'cf\'d6\cb1 \'b5\'c4(\'b6\'d1\'ca\'c7\'c1\'b4\'ca\'bd\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9);\
			2>  \'d5\'bb\'ca\'c7\'ca\'b9\'d3\'c3\'cf\'df\'d0\'d4\'b4\'e6\'b4\'a2\'b5\'c4\'b7\'bd\'b7\'a8(\'d5\'bb\'ca\'c7\'cf\'df\'d0\'d4\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9);\
\
		\'a1\'be\'b6\'d1\'a1\'bf\'b6\'d1\'c0\'ef\'c3\'e6\'b5\'c4\'c4\'da\'b4\'e6\'b6\'bc\'ca\'c7\'b2\'bb\'c1\'ac\'d0\'f8\'b5\'c4\'a3\'ac\'ca\'c7\'d2\'bb\'d0\'a9\'b4\'f3\'b4\'f3\'d0\'a1\'d0\'a1\'b5\'c4\'c4\'da\'b4\'e6\'bf\'e9			(block)\'a1\'a3\
\
		\'a1\'be\'d5\'bb\'a1\'bf\'d5\'bb\'ca\'c7\'c1\'ac\'d0\'f8\'b5\'c4\'d2\'bb\'bf\'e9\'b4\'f3\'c4\'da\'b4\'e6\'a1\'a3(8M)
\f0 \
\
\
		4) 
\f1 \'d5\'bb\'c7\'f8(
\f0\fs46 stack
\f1\fs48 )
\f0 :\

\fs46   \
	  				
\f1 \'a1\'be\'d5\'bb\'b4\'f3\'d0\'a1\'a1\'bf
\f0       
\f1 \'d2\'bb\'b0\'e3\'a3\'ba
\f0  2MB        mac 
\f1 \'cf\'b5\'cd\'b3\'a3\'ba
\f0  8MB
\fs48  
\fs46 												  \
	 
\fs48 	 	1>  
\f1 \cf2 \'bd\'f8\'c8\'eb\'ba\'af\'ca\'fd\'ca\'b1\'b7\'d6\'c5\'e4\'bf\'d5\'bc\'e4
\f0 ,
\f1 \'ba\'af\'ca\'fd\'bd\'e1\'ca\'f8\'ca\'b1\'ca\'cd\'b7\'c5\'bf\'d5\'bc\'e4
\f0 \cf0 \
\
	  		2>  
\f1 \'be\'d6\'b2\'bf\'b1\'e4\'c1\'bf
\f0 ,
\f1 \'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd\'b5\'c8\'be\'f9\'d4\'da\'b4\'cb\'b6\'ce\'d6\'d0
\f0 \
\
	  		3>  
\f1 \'b4\'cb\'b6\'ce\'d6\'d0\'b5\'c4\'b3\'f5\'ca\'bc\'d6\'b5\'be\'f9\'ce\'aa\cb3 \'cb\'e6\'bb\'fa\'ca\'fd
\f0 \cb1 (
\f1 \'b2\'bb\'cd\'ac\'b1\'e0\'d2\'eb\'c6\'f7\'bb\'e1\'b3\'f5\'ca\'bc\'bb\'af\'bc\'b8\'b8\'f6\'ce\'aa
\f0 0)\
\
			4>  
\f1\fs46 \cf2 \'b5\'dd\'b9\'e9\'ba\'af\'ca\'fd\cf0 \'d7\'d4\'c9\'ed\'b5\'f7\'d3\'c3\'d7\'d4\'c9\'ed\'a3\'ac\'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0\'b3\'f6\'bf\'da\'a3\'ac\
				  \'b2\'bb\'cd\'a3\'b5\'d8\'b5\'f7\'d3\'c3\'d7\'d4\'c9\'ed\'a3\'ac\'bf\'c9\'c4\'dc\'bb\'e1\'b5\'bc\'d6\'c2\cf5 \'a1\'be\'d5\'bb\'d2\'e7\'b3\'f6\'a1\'bf\cf0 \'a1\'a3\
\
						\'a1\'begets
\fs48 \'ba\'af\'ca\'fd
\fs46 \'a1\'aa\'a1\'aa\'a1\'aa>\'c8\'e4\'b3\'e6\'a1\'bf\
\
			\'a1\'be\'bf\'ce\'cc\'c3\'c1\'b7\'cf\'b0\'a1\'bf
\f0 	\
			   
\f1 \'b2\'e2\'ca\'d4\'d7\'d4\'bc\'ba\'cf\'b5\'cd\'b3\'d5\'bb\'bf\'d5\'bc\'e4\'b5\'c4\'b4\'f3\'d0\'a1     \
					  \'c3\'fc\'c1\'ee\'a3\'ba
\f0 \cf4 ulimit -s
\f1 \cf0         8192K
\f0 \
								
\fs48 \
		\
		5) 
\f1 \'b6\'d1\'c7\'f8(
\f0 heap
\f1 )
\f0 : \
   \
	  		1> malloc
\f1 \'a1\'a2
\f0 calloc
\f1 \'a1\'a2
\f0 realloc
\f1 \'c9\'ea\'c7\'eb
\f0 ,free
\f1 \'ca\'cd\'b7\'c5
\f0 \
\
	  		2> 
\f1 \'b3\'f5\'ca\'bc\'d6\'b5\'d2\'b2\'ca\'c7\cf2 \'cb\'e6\'bb\'fa\'ca\'fd
\f0 \cf0 \
\
3> 
\f1 \cb9 \'b3\'cc\'d0\'f2\'c7\'f8
\f0 (
\f1 \'d2\'b2\'bd\'d0\'b4\'fa\'c2\'eb\'c7\'f8
\f0 ):\cb1 \
\
	1) \'93
\f1 \'b4\'fa\'c2\'eb\'c7\'f8
\f0 \'94
\f1 \'d3\'d6\'b7\'d6\'ce\'aa\cf2 \'cf\'b5\'cd\'b3\'c6\'f4\'b6\'af\'b4\'fa\'c2\'eb\'c7\'f8
\f0 (.init
\f1 \'b6\'ce
\f0 )\cf0  
\f1 \'a1\'a2\cf2 \'bf\'c9\'d6\'b4\'d0\'d0\'b4\'fa\'c2\'eb\'c7\'f8
\f0 (.text
\f1 \'b6\'ce
\f0 )\cf0 \
\
	2) \cb8 \'93
\f1 \'ba\'af\'ca\'fd\'d6\'b8\'d5\'eb
\f0 \'94
\f1 \cb1 \'cb\'f9\'d6\'b8\'cf\'f2\'b5\'c4\'be\'cd\'ca\'c7\'d5\'e2\'b8\'f6\'c7\'f8\'b5\'c4\'c4\'da\'b4\'e6\
\
					\'ba\'af\'ca\'fd\'c3\'fb\'d2\'b2\'ca\'c7\'d2\'bb\'b8\'f6\'b5\'d8\'d6\'b7\'a1\'a3
\f0 \
\
	3
\f1 \'a3\'a9\'b4\'e6\'b7\'c5\'ba\'af\'ca\'fd\'cc\'e5\'b5\'c4\'b6\'fe\'bd\'f8\'d6\'c6\'b4\'fa\'c2\'eb\
\
				if       for       switch     case    
\f0 \
\
\
\
\
			\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1\fs54 \cf2 \'a1\'be\'ca\'fd\'be\'dd\'d4\'da\'c4\'da\'b4\'e6\'d6\'d0\'b5\'c4\'b7\'d6\'b2\'bc\'a1\'bf
\f0\fs48 \cf0 \
\
	 1) 
\f1 \cb7 \'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\cb1 \'a1\'a2\cb7 \'be\'b2\'cc\'ac\'b1\'e4\'c1\'bf
\f0 (static) \cb1  \
	   
\f1 \'a1\'be\'b7\'d6\'b2\'bc\'a1\'bf
\f0 \
		
\f1 (1) \'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\'b5\'c4\'b6\'c1\'d0\'b4\'b6\'ce\
		(2) \'ce\'b4\'b3\'f5\'ca\'bc\'bb\'af\'b5\'c4\'b7\'c5
\f0 .bss
\f1 \'b6\'ce\
		(3) \'b3\'f5\'ca\'bc\'bb\'af\'b5\'c4\'b7\'c5
\f0 .data
\f1 \'b6\'ce
\f0 \
\
	 2) 
\f1 \'be\'d6\'b2\'bf\'b1\'e4\'c1\'bf\'a1\'a2\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd
\f0 \
	   
\f1 \'a1\'be\'b7\'d6\'b2\'bc\'a1\'bf\'d5\'bb\'c7\'f8
\f0 \
\
	 3) 
\f1 \'b3\'a3\'c1\'bf\'a1\'a2\'d7\'d6\'b7\'fb\'b4\'ae\'b3\'a3\'c1\'bf
\f0        	    \
 	   
\f1 \'a1\'be\'b7\'d6\'b2\'bc\'a1\'bf\'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8\'b5\'c4\'b3\'a3\'c1\'bf\'c7\'f8
\f0 (.rodata
\f1 \'b6\'ce
\f0 )\
\
	 4) 
\f1 \'b4\'fa\'c2\'eb
\f0  
\f1 \'c8\'e7
\f0 while()\
	   
\f1 \'a1\'be\'b7\'d6\'b2\'bc\'a1\'bf\'b4\'fa\'c2\'eb\'c7\'f8\'b5\'c4\'bf\'c9\'d6\'b4\'d0\'d0\'b4\'fa\'c2\'eb\'c7\'f8
\f0 (.text
\f1 \'b6\'ce
\f0 )\
\
	 5) malloc
\f1 \'c9\'ea\'c7\'eb\'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
	   
\f1 \'a1\'be\'b7\'d6\'b2\'bc\'a1\'bf\'b6\'d1\'c7\'f8
\f0 \
\
=====================================================\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf2 \'a1\'be\'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'d3\'eb
\f0 malloc
\f1 \'a1\'bf
\f0 \cf0 \
\

\f1 \'b6\'fe\'a1\'a2\cb11 \'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\cb1 \'d3\'eb\cb8 \'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4
\f0  \cb1 \
    \
   1> 
\f1 \cf12 \cb13 \'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\cf0 \cb1 \'a3\'a8\'cf\'b5\'cd\'b3\'b7\'d6\'c5\'e4\'a3\'a9
\f0 \
\
        
\f1 \'ca\'c7\'d4\'da\cb6 \'b1\'e0\'d2\'eb\'bd\'d7\'b6\'ce\cb1 \'be\'cd\'d2\'aa
\f0 \'93
\f1 \'c4\'dc\'b9\'bb\'c8\'b7\'b6\'a8\'b7\'d6\'c5\'e4\'b5\'c4\'c4\'da\'b4\'e6\'b5\'c4\'b4\'f3\'d0\'a1
\f0 \'94
\f1 \'b5\'c4\'d2\'bb\'d6\'d6\'b7\'d6\'c5\'e4\'b7\'bd\'ca\'bd\'a1\'a3\
\
		\'c8\'b7\'b6\'a8\'a3\'ba\'b1\'e0\'d2\'eb\'bd\'d7\'b6\'ce\
		\'b7\'d6\'c5\'e4\'a3\'ba\'d4\'cb\'d0\'d0\'bd\'d7\'b6\'ce
\f0 \
\
		int arr[1000];  //
\f1 \'b7\'d6\'c5\'e4\'d4\'da\'d5\'bb\'c7\'f8
\f0 \
\
		int a;  //
\f1 \'b7\'d6\'c5\'e4\'d4\'da\'d5\'bb\'c7\'f8
\f0 \
\
		\cf4 static\cf0  int temp;   //
\f1 \'b7\'d6\'c5\'e4\'d4\'da\'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 \
\
		int arr[num];
\f1 \'a3\'a8\'c7\'b0\'cc\'e1\'ca\'c7
\f0 num
\f1 \'d2\'d1\'d6\'aa\'a3\'a9
\f0  //
\f1 \'b7\'d6\'c5\'e4\'d4\'da\'d5\'bb\'c7\'f8
\f0 \
\
		while(1)    //
\f1 \'b7\'d6\'c5\'e4\'d4\'da
\f0 \'93
\f1 \'b4\'fa\'c2\'eb\'c7\'f8
\f0 \'94
\f1 \'b5\'c4\'bf\'c9\'d6\'b4\'d0\'d0\'b4\'fa\'c2\'eb\'c7\'f8
\f0 (.text
\f1 \'b6\'ce
\f0 )\
\
   2> 
\f1 \cb13 \'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4
\f0 \cb1                (2_malloc.c)\
\
   		
\f1 \'b3\'cc\'d0\'f2
\f0 \'93
\f1 \cb8 \'d4\'cb\'d0\'d0\'bd\'d7\'b6\'ce
\f0 \cb1 \'94
\f1 \'b2\'c5\'c8\'b7\'b6\'a8\'d2\'aa\'b7\'d6\'c5\'e4\'b5\'c4\'c4\'da\'b4\'e6\'b5\'c4\'b4\'f3\'d0\'a1
\f0 .\
\
			
\f1 \'c8\'b7\'b6\'a8
\f0  +  
\f1 \'b7\'d6\'c5\'e4\'a3\'ba\'d4\'cb\'d0\'d0\'bd\'d7\'b6\'ce
\f0 \
\
	
\f1 \'a1\'be
\f0 malloc
\f1 \'a1\'bf
\f0\fs46 \cb7 #include  <stdlib.h>
\f2 \cb1 \

\f1 \

\f0\fs48 	1. malloc
\f1 \'b7\'d6\'c5\'e4\'b6\'d1\'c4\'da\'b4\'e6
\f0 :\
\
	  1)
\f1 \'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd
\f0 :   \
		\
		#define  size_t   \cb4 int\cb1  \
\
		\cf2 void *\cf0 malloc(size_t  \cf14 size\cf0 ); \
\
		void
\f1 \'a3\'ba\'cd\'a8\'d3\'c3\'c0\'e0\'d0\'cd\'a3\'ac\'d5\'e2\'d6\'d6\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'fd\'be\'dd\'bf\'c9\'d2\'d4\'c7\'bf\'d6\'c6\'d7\'aa\'bb\'bb\'ce\'aa\'c6\'e4\'cb\'fb\'c8\'ce\'ba\'ce\'c0\'e0\'d0\'cd
\f0 \
\
\
	  2)
\f1 \'ba\'af\'ca\'fd\'cb\'b5\'c3\'f7
\f0 :\
		\
		1> malloc
\f1 \'c9\'ea\'c7\'eb\'b3\'c9\'b9\'a6
\f0 ,
\f1 \'b7\'b5\'bb\'d8\'c9\'ea\'c7\'eb\'b5\'bd\'b5\'c4\'c4\'da\'b4\'e6\'b5\'c4\'ca\'d7\'b5\'d8\'d6\'b7
\f0 ;\
\
		2> malloc
\f1 \'c9\'ea\'c7\'eb\'b5\'c4\'ca\'c7\cf2 \'d2\'bb\'bf\'e9\'c1\'ac\'d0\'f8\'b5\'c4\'c4\'da\'b4\'e6
\f0 \cf0 ;  (10)\
\
				
\f1 \'a1\'be\'b6\'d1\'a1\'bf\cf4 \'c4\'da\'b4\'e6\'bf\'e91(40)\cf0 \'a1\'a22(30)\'a1\'a23(500)\'a1\'a24\'a1\'a25\'a1\'a26\'a1\'a27\'a1\'a28\'a1\'a29
\f0 \
\
		3> 
\f1 \'c8\'e7\'b9\'fb\'c9\'ea\'c7\'eb\'c4\'da\'b4\'e6\'ca\'a7\'b0\'dc\'a3\'ac\'bb\'e1\'b7\'b5\'bb\'d8
\f0 NULL;\
\
		4> 
\f1 \'c9\'ea\'c7\'eb\'ca\'a7\'b0\'dc\'b5\'c4\'d4\'ad\'d2\'f2\'d2\'bb\'b0\'e3\'ce\'aa\'a3\'ba\
\
						a\'a1\'a2\cf2 \'c4\'da\'b4\'e6\'b2\'bb\'d7\'e3\'a3\'bb\cf0 \
						b\'a1\'a2\cf2 \'c3\'bb\'d3\'d0\'d7\'e3\'b9\'bb\'b4\'f3\'b5\'c4\'c1\'ac\'d0\'f8\'b5\'c4\'c4\'da\'b4\'e6.
\f0 \cf0 \
\
		5> void *  
\f1 \'cd\'a8\'d3\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'d6\'b8\'d5\'eb
\f0 ;     (3_malloc.c)\
				
\f1 \'ca\'c7\'d2\'bb\'d6\'d6\'b7\'ba\'d0\'cd\'d6\'b8\'d5\'eb
\f0 :\
			1
\f1 \'a3\'a9\'bf\'c9\'d2\'d4\'ba\'cd\'c6\'e4\'cb\'fb\'c8\'ce\'ba\'ce\'c0\'e0\'d0\'cd\'b5\'c4\'d6\'b8\'d5\'eb\'cf\'e0\'bb\'a5\'d7\'aa\'bb\'bb
\f0 . \
				 
\f1 \'c8\'e7
\f0 : 
\f1 \'ce\'aa\'bd\'e1\'b9\'b9\'cc\'e5\'c9\'ea\'c7\'eb\'c4\'da\'b4\'e6
\f0   (4_malloc_struct.c)\
\
			2
\f1 \'a3\'a9\'b5\'ab\'ca\'c7\'b2\'bb\'c4\'dc\'d6\'b1\'bd\'d3\'ca\'b9\'d3\'c3
\f0 .\
\
	    6> 
\f1 \'c9\'ea\'c7\'eb
\f0 size
\f1 \'b8\'f6\'d7\'d6\'bd\'da\'b5\'c4\'c4\'da\'b4\'e6
\f0 , malloc
\f1 \'bb\'e1\'d4\'da\'b6\'d1\'c9\'cf\'d1\'b0\'d5\'d2\'d2\'bb\'bf\'e9
\f0 size
\f1 \'b8\'f6
\f0 \
		     
\f1 \'d7\'d6\'bd\'da\'b5\'c4\'c4\'da\'b4\'e6\'b7\'b5\'bb\'d8\'b8\'f8\'d3\'c3\'bb\'a7
\f0 .\
\
   3)
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3
\f0 :\
\
	      void *p = malloc(10);\
\
\
	
\f1 \'a1\'be\'bf\'ce\'cc\'c3\'c1\'b7\'cf\'b0\'a1\'bf
\f0 \
	1> 
\f1 \'b7\'d6\'c5\'e4\'d2\'bb\'b8\'f6\'c4\'dc\'d7\'e3\'b9\'bb\'b1\'a3\'b4\'e6
\f0 double
\f1 \'ca\'fd\'be\'dd\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4
\f0 ,
\f1 \'b2\'a2\'c7\'d2\'b8\'b3\'d6\'b5\'ca\'e4\'b3\'f6
\f0 ;   												(exam1.c)\
\
	2> 
\f1 \'b7\'d6\'c5\'e4\'d2\'bb\'b8\'f6\'d7\'e3\'b9\'bb\'b1\'a3\'b4\'e6
\f0 n
\f1 \'b8\'f6
\f0 int
\f1 \'c0\'e0\'d0\'cd\'ca\'fd\'be\'dd\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4
\f0 ,
\f1 \'b2\'a2\'c7\'d2\cf14 \'b8\'b3\'d6\'b5\'ca\'e4\'b3\'f6
\f0 \cf0 .  												(exam2.c)\
\
			int *\cf2 p\cf0  = (int *)malloc(n * sizeof(int));\
\
			for(i = 0;i < n;i ++)\
			\{\
				  p[i] = i + 1;\
			\}\
=====================================================\
\

\f1 \'a1\'be\'cb\'bc\'bf\'bc\'a1\'bf\'c9\'ea\'c7\'eb\'b5\'c4\'c4\'da\'b4\'e6\'ca\'c7\'b7\'f1\'d0\'e8\'d2\'aa\'ca\'cd\'b7\'c5
\f0 ,
\f1 \'b2\'bb\'ca\'cd\'b7\'c5\'ca\'c7\'b7\'f1\'bf\'c9\'d2\'d4
\f0 ,
\f1 \'bb\'e1\'d4\'ec\'b3\'c9\'d4\'f5\'d1\'f9\'b5\'c4\'bd\'e1\'b9\'fb
\f0 ?\
\
\
					
\f1 \'bf\'cf\'b6\'a8\'d2\'aa\'ca\'cd\'b7\'c5\'a1\'aa\'a1\'aa>  \'bb\'e1\'d4\'ec\'b3\'c9\cf4 \'a1\'be\'c4\'da\'b4\'e6\'d0\'b9\'c2\'b6\'a1\'bf\'a1\'aa>  \'cf\'b5\'cd\'b3\'d6\'d8\'c6\'f4
\f0 \cf0 \
\
					
\f1 \'a1\'be\'b7\'bf\'d7\'d3\'a1\'bf100\'c6\'bd\'b7\'bd    50        30\
\
						\'c9\'e8\'bc\'c6\'d2\'bb\'b8\'f6\'bc\'d0\'b2\'e3       80\'c6\'bd\'b7\'bd\
					   
\f0 \
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf0 \cb4 \'a1\'be
\f0 free
\f1 \'a1\'bf
\f0\fs46 \cb1 #include  <stdlib.h>
\f1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs48 \cf0 \

\f1 \'c8\'fd\'a1\'a2\'c4\'da\'b4\'e6\'ca\'cd\'b7\'c5\'ba\'af\'ca\'fd
\f0              (5_free.c)\
\
	
\f1 \'a1\'be
\f0 free 
\f1 \'ca\'cd\'b7\'c5\'c4\'da\'b4\'e6\'a1\'bf
\f0 \
\
	  1> 
\f1 \'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd
\f0 :\
	     void free(void *\cf4 ptr\cf0 );\
\
	  2> 
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3
\f0 :\
	     	free(ptr);\
\
	  3> 
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3\'d7\'a2\'d2\'e2
\f0 :\
\
	     1> 
\f1 \'cb\'bc\'bf\'bc
\f0 : 
\f1 \'ca\'cd\'b7\'c5\'ba\'f3\'b5\'c4\'c4\'da\'b4\'e6\'ca\'c7\'b7\'f1\'bf\'c9\'d2\'d4\'bc\'cc\'d0\'f8\'ca\'b9\'d3\'c3
\f0 ?  
\f1 \'a1\'be\'bf\'c9\'d2\'d4\'a1\'bf
\f0 \
\
	     2> 
\f1 \cf14 \'d6\'bb\'c4\'dc\'b6\'d4\'d3\'d0\'d0\'a7\'b7\'d6\'c5\'e4\'b5\'c4\'c4\'da\'b4\'e6\'bd\'f8\'d0\'d0\'ca\'cd\'b7\'c5
\f0 ;\cf0 \
\
	     3> 
\f1 \'cb\'bc\'bf\'bc
\f0 : 
\f1 \'b1\'bb\'ca\'cd\'b7\'c5\'b5\'c4\'c4\'da\'b4\'e6\'bb\'b9\'bf\'c9\'d2\'d4\'d2\'fd\'d3\'c3\'c2\'f0
\f0 ?   p    *p   
\f1 \'a1\'be\'bf\'c9\'d2\'d4\'a1\'bf
\f0 \
\
	     4> 
\f1 \'cb\'bc\'bf\'bc
\f0 : 
\f1 \'c8\'e7\'b9\'fb\'b6\'d4\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'c1\'ac\'d0\'f8\'ca\'cd\'b7\'c5\'c1\'bd\'b4\'ce\'bb\'e1\'c8\'e7\'ba\'ce
\f0 ?(
\f1 \'d6\'d8\'b5\'e3
\f0 )    (exam3.c) \
\
		
\f1 \cf4 \'a1\'be\'d6\'d8\'b8\'b4\'ca\'cd\'b7\'c5\'a1\'bf
\f3 \cf0 \CocoaLigature0 a.out(1382,0x7fff76142310) malloc: *** error for object 0x7ff2aa4038f0: pointer being freed was not allocated\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 *** set a breakpoint in malloc_error_break to debug\
Abort trap: 6\
\
		\cf4 	
\f1 \'a1\'be\'c4\'da\'b4\'e6\'ca\'cd\'b7\'c5\'a1\'bf\'bc\'b4\'b1\'e3\'ca\'c7\'d2\'d1\'be\'ad\'ca\'cd\'b7\'c5\'b5\'f4\'b5\'c4\'c4\'da\'b4\'e6\'a3\'ac\'d2\'b2\'ca\'c7\'bf\'c9\'d2\'d4\'b7\'c3\'ce\'ca\'b5\'c4(\'bf\'c9\'d2\'d4\'b4\'f2\'d3\'a1\'b3\'f6\'bd\'e1\'b9\'fb\'a3\'ac\'b6\'f8\'c7\'d2\'bd\'e1\'b9\'fb\'b2\'bb\'b1\'e4)\'a1\'a3\'ca\'cd\'b7\'c5\'d6\'bb\'d7\'f6\'c1\'cb\'d2\'bb\'bc\'fe\'ca\'c2:\'be\'cd\'ca\'c7\'d0\'fb\'b2\'bc\'d5\'e2\'bf\'e9\'c4\'da\'b4\'e6\'b5\'d8\'d6\'b7\'ce\'d2\'b2\'bb\'d2\'aa\'c1\'cb(\'b6\'aa\'bd\'f8\'c1\'cb\'c0\'ac\'bb\'f8\'cd\'b0)\'a1\'a3\cf0   \'d0\'fb\'b2\'bc\'d5\'e2\'bf\'e9\'c4\'da\'b4\'e6\'c0\'ef\'c3\'e6\'b5\'c4\'c4\'da\'c8\'dd\'ca\'c7\'cb\'e6\'bb\'fa\'d6\'b5\'a1\'a3
\f0 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
	     5> 
\f1 \cb8 \'b2\'bb\'c4\'dc\'ca\'cd\'b7\'c5\'d5\'bb\'c9\'cf\'b5\'c4\'bf\'d5\'bc\'e4
\f0 ;\cb1 \
	\
				
\f1\fs46 int a;\
				free(&a);  //\'b4\'ed\'ce\'f3\'a3\'bb\
				\'d5\'bb\'bf\'d5\'bc\'e4\'d3\'c9\cb14 \'cf\'b5\'cd\'b3\cb1 \'b7\'d6\'c5\'e4\'ba\'cd\'ca\'cd\'b7\'c5\'a3\'bb\

\f0\fs48 \
	     6> 
\f1 \'c8\'e7\'ba\'ce\'b1\'dc\'c3\'e2\'c9\'cf\'ca\'f6\'c7\'e9\'bf\'f6
\f0 ?\
					
\f1\fs46 free(p);\
					\cf4 p=NULL;\cf0 \
					free(p);\
\
				\'a1\'be
\f4 \uc0\u55357 \u56375 
\f1 \'a1\'bf\'b6\'d4\'d2\'d1\'be\'ad\'ca\'cd\'b7\'c5\'b5\'f4\'b5\'c4\'c4\'da\'b4\'e6\'bc\'cc\'d0\'f8\'b7\'c3\'ce\'ca\'bb\'e1\'b5\'bc\'d6\'c2\
					
\f3\fs48 \CocoaLigature0 Segmentation fault: 11
\f1\fs46 \CocoaLigature1 \
\
		\'a1\'be\'b9\'e9\'c4\'c9\'a1\'bf\'ca\'cd\'b7\'c5\'b4\'e6\'b4\'a2\'bf\'d5\'bc\'e4\'a3\'ac\'cf\'e0\'b5\'b1\'d3\'da\'b0\'d1\'b8\'c3\'bf\'d5\'bc\'e4\'bb\'b9\'b8\'f8\'cf\'b5\'cd\'b3\'a3\'ac\'cf\'b5\'cd\'b3\'be\'cd\'bf\'c9\'d2\'d4\
		  \'b0\'d1\'b8\'c3\'bf\'d5\'bc\'e4\'bd\'f8\'d0\'d0\'d6\'d8\'d0\'c2\'b7\'d6\'c5\'e4\'a3\'bb\'ca\'cd\'b7\'c5\'b4\'e6\'b4\'a2\'bf\'d5\'bc\'e4\'a3\'ac\cb15 \'b2\'bb\'bb\'e1\'b0\'d1\'c0\'ef\'c3\'e6\'ca\'fd\'be\'dd\'c7\'e5\'bf\'d5\'b5\'c4\cb1 \'a1\'a3\
\

\f0\fs48 	 
\f1 \'a1\'be\'bf\'ce\'cc\'c3\'c1\'b7\'cf\'b0\'a1\'bf
\f0 \
	   
\f1\fs46 \'ca\'cd\'b7\'c5
\f0 malloc
\f1 \'c9\'ea\'c7\'eb\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'a1\'a3
\f0\fs48 \
\
\
\
\
\
\
\
\cf2 ===============
\f1 \'ce\'d2\'ca\'c7\'c3\'c0\'c0\'f6\'b5\'c4\'b7\'d6\'bd\'e7\'cf\'df
\f0 =====================\cf0 \
\
	
\f1 \'a1\'be\'cb\'bc\'bf\'bc\'a1\'bf\'c8\'e7\'b9\'fb\'cf\'d6\'d4\'da\'cb\'f9\'ca\'b9\'d3\'c3\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'b2\'bb\'d7\'e3\'a3\'ac\'cf\'eb\'d2\'aa\'d6\'d8\'d0\'c2\'b7\'d6\'c5\'e4\'d2\'bb\'bf\'e9\'c4\'da\'b4\'e6
\f0 ,\
	    			  
\f1 \'b5\'ab\'ca\'c7\'d3\'d6\'b2\'bb\'cf\'eb\'b6\'aa\'ca\'a7\'d4\'ad\'c0\'b4\'b5\'c4\'ca\'fd\'be\'dd\'a3\'ac\'d4\'f5\'c3\'b4\'b0\'ec
\f0 ?\
\
			malloc         \cf2 re\cf0 alloc\
\
\
\
\
\
\
\

\f1 \'a1\'be
\f0 realloc
\f1 \'a1\'bf
\f0\fs46 \cb15 #include  <stdlib.h>\cb1 \

\fs48 \

\f1 \'cb\'c4\'a1\'a2\'b6\'fe\'b4\'ce\'c4\'da\'b4\'e6\'c9\'ea\'c7\'eb    
\f0 \
\
	1. realloc  
\f1 \'d6\'d8\'d0\'c2\'b7\'d6\'c5\'e4\'c4\'da\'b4\'e6
\f0 \
\
	  1> 
\f1 \'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd
\f0 :\
	\
	       \cf2 void *\cf0 realloc(void *\cf2 ptr\cf0 , size_t \cf4 size\cf0 )\
\
	       
\f1 \'d4\'da
\f0 ptr
\f1 \'d6\'b8\'d5\'eb\'ba\'f3\'d4\'d9\'b7\'d6\'c5\'e4
\f0 size
\f1 \'b8\'f6\'d7\'d6\'bd\'da\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4
\f0 :\
\
	       1
\f1 \'a3\'a9
\f0  size > malloc(size)     
\f1 \cb16 \'c0\'a9\'d5\'b9\'c4\'da\'b4\'e6
\f0 \cb1       (6_realloc.c)\
\
	       2
\f1 \'a3\'a9
\f0  size < malloc(size)     
\f1 \'cb\'f5\'bc\'f5\'c4\'da\'b4\'e6
\f0       \
\
	       3
\f1 \'a3\'a9
\f0  size = malloc(size)     
\f1 \'b2\'bb\'b1\'e4
\f0         (7_realloc.c)\
\
	       4
\f1 \'a3\'a9
\f0 \cb14  
\f1 \'d6\'b8\'d5\'eb
\f0 ptr\cb1 : 
\f1 \'d2\'bb\'b0\'e3\'ca\'c7
\f0 malloc
\f1 \'b7\'b5\'bb\'d8\'b5\'c4\'d6\'b8\'d5\'eb
\f0 ,
\f1 \'c6\'d5\'cd\'a8\'d6\'b8\'d5\'eb\'b2\'bb\'c4\'dc\'b4\'ab\'bd\'f8\'c8\'a5
\f0 ; \
	\
\
	  
\f1 \'c0\'fd\'d7\'d3\'a3\'ba
\f0 void *ptr = malloc(30);		      \
	  2> 
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3
\f0 :\
		   realloc(ptr, 40);         (exam4.c) \
\
	  3> realloc
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3\'d7\'a2\'d2\'e2\'ca\'c2\'cf\'ee
\f0 :\
\
		  p = realloc(ptr,size);
\f1 \

\f0 \
	    1
\f1 \'a3\'a9\'c8\'e7\'b9\'fb
\f0 ptr
\f1 \'d6\'b4\'d0\'d0ptr ==
\f0  NULL
\f1 \'a3\'ac\'d4\'f2\'cf\'e0\'b5\'b1\'d3\'da\'d6\'b1\'bd\'d3\'ca\'b9\'d3\'c3
\f0 malloc. (exam5.c)												\
		2
\f1 \'a3\'a9\'c8\'e7\'b9\'fb\'d4\'da
\f0 ptr
\f1 \'ba\'f3\'b5\'c4\'b2\'ce\'ca\'fdsize\'ce\'aa0\'a3\'ac\'d4\'f2\'cf\'e0\'b5\'b1\'d3\'da\cb15 free\'ba\'af\'ca\'fd\cb1 .\

\f0 \
	    3
\f1 \'a3\'a9\'cb\'bc\'bf\'bc
\f0 : 
\f1 \'ba\'af\'ca\'fd\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7\'ca\'b2\'c3\'b4
\f0 ?\

\f1                                                   \
			 		1> \'c8\'e7\'b9\'fb\'c9\'ea\'c7\'eb\'b3\'c9\'b9\'a6\'a3\'ac\'b7\'b5\'bb\'d8\cb8 \'c1\'ac\'d0\'f8\'bf\'d5\'bc\'e4\'b5\'c4\'ca\'d7\'b5\'d8\'d6\'b7\cb1 \'a3\'bb\
					2> \'c8\'e7\'b9\'fb\'c9\'ea\'c7\'eb\'ca\'a7\'b0\'dc\'a3\'ac\'b7\'b5\'bb\'d8NULL.\

\f0 \
	       \
	       
\f1 \'a1\'be\'bf\'ce\'cc\'c3\'c1\'b7\'cf\'b0\'a1\'bf
\f0 \
			
\f1 \'ca\'b9\'d3\'c3
\f0 realloc
\f1 \'ba\'af\'ca\'fd\'ce\'aa
\f0 malloc
\f1 \'b7\'d6\'c5\'e4\'b5\'c4\'c4\'da\'b4\'e6\'cf\'f2\'ba\'f3\'c0\'a9\'d5\'b9
\f0 40
\f1 \'b8\'f6\'d7\'d6\'bd\'da\'b5\'c4\'bf\'d5\'bc\'e4\'a1\'a3			
\f0\fs46 malloc 30
\f1 \'b8\'f6
\f0 int
\f1 \'d0\'cd				
\f0\fs48 (exam6.c)\
\
		    			0> 
\f1 \'b1\'c8\'bd\'cf\'b7\'b5\'bb\'d8\'b5\'d8\'d6\'b7\'ca\'c7\'b7\'f1\'ce\'aa\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'b5\'d8\'d6\'b7
\f0 \
\
		    			1> 
\f1 \'ca\'e4\'b3\'f6\'d0\'c2\'bf\'d5\'bc\'e4\'d6\'d0\'b5\'c4\'cb\'f9\'d3\'d0\'c4\'da\'c8\'dd
\f0 \
\
		    			2> 
\f1 \'b6\'d4\'d0\'c2\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'bd\'f8\'d0\'d0\'b8\'b3\'d6\'b5\'ba\'f3\'ca\'e4\'b3\'f6\
\
\

\f0 ====================================================\
\

\f1 \'ce\'e5\'a1\'a2\'a1\'be\cf17 \'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\cf0 \'d3\'eb\cf17 \'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\cf0 \'b5\'c4\'c7\'f8\'b1\'f0\'a1\'bf\
\
	
\f0 \cf2 w\cf0 ho \cf2 w\cf0 hen \cf2 w\cf0 here \cf2 r\cf0 elease             \
	\'933w+r\'94
\f1 \'b7\'d6\'b1\'f0\'ca\'c7\cb16 \'ca\'b1\'bc\'e4\cb1 \'a1\'a2\cb9 \'b5\'d8\'b5\'e3\cb1 \'a1\'a2\cb9 \'c8\'cb\'ce\'ef
\f0 \cb1  + 
\f1 \cb8 \'ca\'cd\'b7\'c5\'b7\'bd\'ca\'bd\cb1 \

\f0 \
    1.
\f1 \'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4
\f0 \
\
		<1> 
\f1 \'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b7\'d6\'c5\'e4\'bf\'d5\'bc\'e4
\f0 \
\
		<2> 
\f1 \'bf\'d5\'bc\'e4\'b4\'f3\'d0\'a1\'d4\'da\'b1\'e0\'d2\'eb\'ca\'b1\'c8\'b7\'b6\'a8\'a3\'ac\'b6\'f8\'b7\'c7\'d4\'cb\'d0\'d0\'ca\'b1
\f0 \
\
		<3> 
\f1\fs46 \'bf\'d5\'bc\'e4\'d4\'da\cb18 \'d5\'bb\'c7\'f8\cb1 \'d3\'eb\cb19 \'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 (
\f1 \'b6\'c1\'d0\'b4\'ca\'fd\'be\'dd\'b6\'ce\'a3\'ac\'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'b6\'ce
\f0 )
\f1 \cb1 \'d2\'d4\'bc\'b0
\f0 \cb7 \'93
\f1 \'b4\'fa\'c2\'eb\'c7\'f8
\f0 \'94\cb1 \

\fs48 \
		<4> 
\f1 \'ca\'cd\'b7\'c5\'b7\'bd\'ca\'bd
\f0 : 
\f1 \'d7\'d4\'b6\'af\'ca\'cd\'b7\'c5\'bf\'d5\'bc\'e4
\f0 \
\
	2.
\f1 \'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4
\f0 \
\
		<1> 
\f1 \'b3\'cc\'d0\'f2\'d4\'b1\'b7\'d6\'c5\'e4\'bf\'d5\'bc\'e4
\f0     \
\
		<2> 
\f1 \'d4\'cb\'d0\'d0\'ca\'b1\'c8\'b7\'b6\'a8\'a3\'ac\'c3\'bf\'b4\'ce\'d4\'cb\'d0\'d0\'b6\'bc\'b2\'bb\'cd\'ac
\f0 \
\
		<3> 
\f1 \'bf\'d5\'bc\'e4\'d4\'da\cb16 \'b6\'d1\'c7\'f8\cb1    (\'d5\'bb\'d2\'b2\'bf\'c9\'d2\'d4\'bd\'f8\'d0\'d0\'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'b5\'c4\'a3\'ac\'b5\'ab\'ca\'c7\'cd\'a8\'b3\'a3\'ba\'f6\'c2\'d4)
\f0 \
\
		<4> 
\f1 \'ca\'cd\'b7\'c5\'b7\'bd\'ca\'bd
\f0 : 
\f1 \'ca\'d6\'b6\'af\'ca\'cd\'b7\'c5\'bf\'d5\'bc\'e4
\f0   //free
\f1 \'bb\'f2
\f0 delete\
\
=====================================================\
\

\f1 \'a1\'be\'b3\'a3\'d3\'c3\'c4\'da\'b4\'e6\'b4\'a6\'c0\'ed\'ba\'af\'ca\'fd\'a1\'bf
\f0\fs46 \cb14 #include 
\f1 \cb14 <
\f0 \cb14 string.h
\f1 \cb14 >\cb1 \
\

\f0\fs48  
\f1 \'c1\'f9\'a1\'a2\cb16 \'b3\'a3\'d3\'c3\'c4\'da\'b4\'e6\'b4\'a6\'c0\'ed\'ba\'af\'ca\'fd
\f0 \cb1 \
\
	1> 
\f1 \cb16 \'c7\'e5\'bb\'ba\'b4\'e6\'ba\'af\'ca\'fd
\f0 \cb16 mem\cf14 set\cf0  \cb1 \
\
		1
\f1 \'a3\'a9\'c4\'dc\'b9\'bb\'d6\'b8\'b6\'a8\'b5\'d8\'d6\'b7\'a1\'a2\'d6\'b8\'b6\'a8\'b4\'f3\'d0\'a1\'b2\'a2\'c9\'e8\'d6\'c3\'ce\'aa\'d6\'b8\'b6\'a8\'c4\'da\'c8\'dd
\f0       \cb4  \'93
\f1 \'c8\'fd\'d6\'b8
\f0 \'93 \cb1  \
\
	  	2
\f1 \'a3\'a9\'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd
\f0 :   (
\f1 \'c7\'e5\'bb\'ba\'b4\'e6\'b5\'c4\'d7\'f7\'d3\'c3
\f0 )\
				void *memset(void *\cf4 ptr\cf0 , int \cf2 c\cf0 , size_t \cf4 len\cf0 )\
\
	    3
\f1 \'a3\'a9\'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3
\f0 :   (8_memset.c)\
\
\
\
\
\
\
\
\
	   
\f1 \'c1\'b7\'cf\'b0
\f0 : 
\f1 \'b7\'d6\'c5\'e4
\f0 10
\f1 \'b8\'f6\'d7\'d6\'bd\'da\'b5\'c4\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4
\f0     (exam7.c)\
\
		1> 
\f1 \'ca\'e4\'b3\'f6\'b8\'c3\'bf\'d5\'bc\'e4\'d6\'d0\'b5\'c4\'c4\'da\'c8\'dd
\f0  \
\
		2> 
\f1 \'bd\'ab\'b8\'c3\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'c9\'cf\'b5\'c4\'c4\'da\'c8\'dd\'c8\'ab\'b2\'bf\'c9\'e8\'d6\'c3\'ce\'aa\'d7\'d6\'b7\'fb1\'d4\'d9\'ca\'e4\'b3\'f6
\f0 	\
\
					\
						\
\cf4 ===================
\f1 \'d2\'d4\'cf\'c2\'c4\'da\'c8\'dd\'a1\'be\'d7\'d4\'d1\'a7\'a1\'bf=====================
\f0 \cf0 \
\
	\
	
\f1 \'b6\'d4\'b1\'c8
\f0 : \cb20 memcpy\cb1    
\f1 \'b2\'bb\'b9\'dc\'c4\'da\'b4\'e6\'ca\'c7\'b2\'bb\'ca\'c7\'d3\'d0\'d6\'d8\'ba\'cf
\f0 (
\f1 \'b2\'bb\'c4\'dc\'b4\'a6\'c0\'ed\'c4\'da\'b4\'e6\'d6\'d8\'b5\'fe\'b5\'c4\'c7\'e9\'bf\'f6
\f0 ).      \
	
\f1 \'bf\'bd\'b1\'b4\'c4\'da\'b4\'e6\'b5\'c4\'ba\'af\'ca\'fd
\f0 .   (exam8.c)\
\
	memcpy(s1,s2,len)  
\f1 \'d3\'eb
\f0  strcpy
\f1 \'b1\'c8\'bd\'cf\'a1\'a3
\f0 \
\

\f1 \'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad\'a3\'ad
\f0 \
\
	2> 
\f1 \'c4\'da\'b4\'e6\'bf\'bd\'b1\'b4
\fs46 \'ba\'af\'ca\'fd\'a3\'ba
\f0 				\
		void *memcpy(void *dest, const void *src, size_t len)             \
		void *\cf6 \cb7 memmove\cf0 \cb1 (void *dest, const void *src, size_t len)\
			\
		
\f1 1> \'cb\'fc\'c3\'c7\'b5\'c4\'d7\'f7\'d3\'c3\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4\'a3\'ac\'ce\'a8\'d2\'bb\'b5\'c4\'c7\'f8\'b1\'f0\'ca\'c7\'a3\'ac\'b5\'b1\'c4\'da\'b4\'e6\'b7\'a2\'c9\'fa\'be\'d6\'b2\'bf\'d6\'d8\'b5\'fe\
			\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac
\f0 memmove
\f1 \'bf\'c9\'d2\'d4\'b1\'a3\'d6\'a4\'bf\'bd\'b1\'b4\'b5\'c4\'bd\'e1\'b9\'fb\'ca\'c7\'d5\'fd\'c8\'b7\'b5\'c4\'a3\'ac
\f0 memcpy\
			
\f1 \'b2\'bb\'b1\'a3\'d6\'a4\'bf\'bd\'b1\'b4\'b5\'c4\'bd\'e1\'b9\'fb\'b5\'c4\'d5\'fd\'c8\'b7\'a1\'a3\'ca\'b5\'bc\'ca\'c9\'cf\'a3\'ac
\f0 memcpy
\f1 \'d6\'bb\'ca\'c7
\f0 memmove\
			
\f1 \'b5\'c4\'d2\'bb\'b8\'f6\'d7\'d3\'bc\'af\'a1\'a3
\f0 memmove 
\f1 \'b1\'c8
\f0 memcpy
\f1 \'b8\'fc\'c4\'dc\'b1\'a3\'d6\'a4\'ca\'fd\'be\'dd\'d7\'bc\'c8\'b7\'d0\'d4\'a1\'a3
\f0 \
\
		2> 
\f1 \'c8\'e7\'b9\'fb\'c4\'da\'b4\'e6\'c7\'f8\'d3\'f2\'c3\'bb\'d3\'d0\'d6\'d8\'b5\'fe\'a3\'ba
\f0  memmove
\f1 \'ba\'cd
\f0 memcpy
\f1 \'b6\'bc\'bf\'c9\'d2\'d4\'d3\'c3\'a1\'a3
\f0 \

\fs48 			 memmove
\f1 \'c4\'da\'b4\'e6\'bf\'bd\'b1\'b4\'a1\'be\'bf\'c9\'b4\'a6\'c0\'ed\'d6\'d8\'b5\'fe\'b5\'c4\'ca\'fd\'be\'dd\'a1\'bf
\f0 ,
\f1 \'b4\'d3
\f0 src
\f1 \'bf\'bd\'b1\'b4
\f0 len\
			 
\f1 \'b5\'c4\'d7\'d6\'bd\'da\'c4\'da\'c8\'dd\'b5\'bd
\f0 dest
\f1 \'d6\'d0\'a1\'a3\
			 
\f0 memcpy
\f1 \'c4\'da\'b4\'e6\'bf\'bd\'b1\'b4\'a1\'be\'b2\'bb\'c4\'dc\'b4\'a6\'c0\'ed\'c4\'da\'b4\'e6\'d6\'d8\'b5\'fe\'b5\'c4\'c7\'e9\'bf\'f6\'a1\'bf\'b2\'bb\'b9\'dc\'c4\'da\'b4\'e6\
			\'ca\'c7\'b2\'bb\'ca\'c7\'d3\'d0\'d6\'d8\'ba\'cf(strcpy\'d6\'bb\'d5\'eb\'b6\'d4\'d7\'d6\'b7\'fb\'b4\'ae\'d3\'d0\'d0\'a7)\'a1\'a3
\f0 \
\
	   3> 
\f1 \'ba\'af\'ca\'fd\'ca\'b9\'d3\'c3
\f0                     (9_memmove.c)\
\
				char  arr[]= "hello";\
				char  str[20] = \{0\};\
\
				double arr[] = \{10.0\};\
\
=====================================================\
\

\f1 \'a1\'be
\f0 HomeWork
\f1 \'a1\'bf    \cf4 \'a1\'be\'bf\'bc\'ca\'d4\'cd\'ea\'d2\'d4\'ba\'f3\'d4\'d9\'c8\'a5\'d1\'d0\'be\'bf\'a1\'bf
\f0 \cf0 \
		
\f1 \'c4\'e3\'b8\'d2\'cc\'f4\'d5\'bd\'d7\'d4\'b6\'a8\'d2\'e5\'d2\'bb\'b8\'f6\'bf\'bc\'c2\'c7\'c4\'da\'b4\'e6\'d6\'d8\'b5\'fe\'b5\'c4\'c7\'e9\'bf\'f6\'b5\'c4
\f0 mystrcpy
\f1 \'ba\'af\'ca\'fd\'c2\'f0\'a3\'bf												
\f0 (10_mystrcpy.c)\
		\
		1> 
\f1 \'c3\'e6\'ca\'d4\'d6\'d0\'cd\'d1\'d3\'b1\'b6\'f8\'b3\'f6
\f0 !\
				\
		2>
\f1 \'d2\'bb\'cc\'e2\'b4\'b3\'cc\'ec\'cf\'c2
\f0 !\
\
=====================================================\
\

\f1 \'a1\'be\'bf\'ce\'ba\'f3\'bc\'d3\'d3\'cd\'d5\'be\'a1\'bf
\f0 \
\

\f1 \'d2\'bb\'a1\'a2\'b1\'c8\'bd\'cf
\f0 memcpy
\f1 \'ba\'cd
\f0 memmove\
\
\cf2 1> memmove\cf0 \
\

\f1 \'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd\'a3\'ba
\f0 void *memmove(void *dest, const void *source, size_t count)\
\

\f1 \'b7\'b5\'bb\'d8\'d6\'b5\'cb\'b5\'c3\'f7\'a3\'ba\'b7\'b5\'bb\'d8\'d6\'b8\'cf\'f2
\f0 dest
\f1 \'b5\'c4
\f0 void *
\f1 \'d6\'b8\'d5\'eb
\f0 \
\

\f1 \'b2\'ce\'ca\'fd\'cb\'b5\'c3\'f7\'a3\'ba
\f0 dest,source
\f1 \'b7\'d6\'b1\'f0\'ce\'aa\'c4\'bf\'b1\'ea\'b4\'ae\'ba\'cd\'d4\'b4\'b4\'ae\'b5\'c4\'ca\'d7\'b5\'d8\'d6\'b7\'a1\'a3
\f0 count
\f1 \'ce\'aa\'d2\'aa\'d2\'c6\'b6\'af\'b5\'c4\'d7\'d6\'b7\'fb\'b5\'c4\'b8\'f6\'ca\'fd
\f0 \
\

\f1 \'ba\'af\'ca\'fd\'cb\'b5\'c3\'f7\'a3\'ba
\f0 memmove
\f1 \'d3\'c3\'d3\'da\'b4\'d3
\f0 source
\f1 \'bf\'bd\'b1\'b4
\f0 count
\f1 \'b8\'f6\'d7\'d6\'b7\'fb\'b5\'bd
\f0 dest
\f1 \'a3\'ac\'c8\'e7\'b9\'fb\'c4\'bf\'b1\'ea\'c7\'f8\'d3\'f2\'ba\'cd\'d4\'b4\'c7\'f8\'d3\'f2\'d3\'d0\'d6\'d8\'b5\'fe\'b5\'c4\'bb\'b0\'a3\'ac
\f0 memmove
\f1 \'c4\'dc\'b9\'bb\'b1\'a3\'d6\'a4\'d4\'b4\'b4\'ae\'d4\'da\'b1\'bb\'b8\'b2\'b8\'c7\'d6\'ae\'c7\'b0\'bd\'ab\'d6\'d8\'b5\'fe\'c7\'f8\'d3\'f2\'b5\'c4\'d7\'d6\'bd\'da\'bf\'bd\'b1\'b4\'b5\'bd\'c4\'bf\'b1\'ea\'c7\'f8\'d3\'f2\'d6\'d0\'a1\'a3
\f0 \
\
\cf2 2> memcpy\cf0 \
\

\f1 \'ba\'af\'ca\'fd\'d4\'ad\'d0\'cd\'a3\'ba
\f0 void *memcpy(void *dest, const void *source, size_t count);\
\

\f1 \'b7\'b5\'bb\'d8\'d6\'b5\'cb\'b5\'c3\'f7\'a3\'ba\'b7\'b5\'bb\'d8\'d6\'b8\'cf\'f2
\f0 dest
\f1 \'b5\'c4
\f0 void *
\f1 \'d6\'b8\'d5\'eb
\f0 \
\

\f1 \'ba\'af\'ca\'fd\'cb\'b5\'c3\'f7\'a3\'ba
\f0 memcpy
\f1 \'b9\'a6\'c4\'dc\'ba\'cd
\f0 memmove
\f1 \'cf\'e0\'cd\'ac\'a3\'ac\'b5\'ab\'ca\'c7
\f0 memcpy
\f1 \'d6\'d0
\f0 dest
\f1 \'ba\'cd
\f0 source
\f1 \'d6\'d0\'b5\'c4\'c7\'f8\'d3\'f2\'b2\'bb\'c4\'dc\'d6\'d8\'b5\'fe\'a3\'ac\'b7\'f1\'d4\'f2\'bb\'e1\'b3\'f6\'cf\'d6\'ce\'b4\'d6\'aa\'bd\'e1\'b9\'fb\'a1\'a3
\f0 \
\
3> 
\f1 \cf2 \'c1\'bd\'d5\'df\'c7\'f8\'b1\'f0
\f0 \cf0 \
\
  
\f1 \'ba\'af\'ca\'fd
\f0 memcpy()   
\f1 \'b4\'d3
\f0 source  
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'c7\'f8\'d3\'f2\'cf\'f2
\f0 dest
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'c7\'f8\'d3\'f2\'b8\'b4\'d6\'c6
\f0 count
\f1 \'b8\'f6\'d7\'d6\'b7\'fb\'a3\'ac\'c8\'e7\'b9\'fb\'c1\'bd\'ca\'fd\'d7\'e9\'d6\'d8\'b5\'fe\'a3\'ac\'b2\'bb\'b6\'a8\'d2\'e5\'b8\'c3\'ba\'af\'ca\'fd\'b5\'c4\'d0\'d0\'ce\'aa\'a1\'a3\'b6\'f8
\f0 memmove(),
\f1 \'c8\'e7\'b9\'fb\'c1\'bd\'ba\'af\'ca\'fd\'d6\'d8\'b5\'fe\'a3\'ac\'b8\'b3\'d6\'b5\'c8\'d4\'d5\'fd\'c8\'b7\'bd\'f8\'d0\'d0\'a1\'a3
\f0 \
\
  memcpy
\f1 \'ba\'af\'ca\'fd\'bc\'d9\'c9\'e8\'d2\'aa\'b8\'b4\'d6\'c6\'b5\'c4\'c4\'da\'b4\'e6\'c7\'f8\'d3\'f2\'b2\'bb\'b4\'e6\'d4\'da\'d6\'d8\'b5\'fe\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'e3\'c4\'dc\'c8\'b7\'b1\'a3\'c4\'e3\'bd\'f8\'d0\'d0\'b8\'b4\'d6\'c6\'b2\'d9\'d7\'f7\'b5\'c4\'b5\'c4\'c4\'da\'b4\'e6\'c7\'f8\'d3\'f2\'c3\'bb\'d3\'d0\'c8\'ce\'ba\'ce\'d6\'d8\'b5\'fe\'a3\'ac\'bf\'c9\'d2\'d4\'d6\'b1\'bd\'d3\'d3\'c3
\f0 memcpy;
\f1 \'c8\'e7\'b9\'fb\'c4\'e3\'b2\'bb\'c4\'dc\'b1\'a3\'d6\'a4\'ca\'c7\'b7\'f1\'d3\'d0\'d6\'d8\'b5\'fe\'a3\'ac\'ce\'aa\'c1\'cb\'c8\'b7\'b1\'a3\'b8\'b4\'d6\'c6\'b5\'c4\'d5\'fd\'c8\'b7\'d0\'d4\'a3\'ac\'c4\'e3\'b1\'d8\'d0\'eb\'d3\'c3
\f0 memmove
\f1 \'a1\'a3
\f0 	\
\
=======================================================\

\f1\fs46 \'a1\'be
\f0 realloc
\f1 \'ca\'b9\'d3\'c3\'d7\'dc\'bd\'e1\'a1\'bf\

\f0 \
1. realloc
\f1 \'ca\'a7\'b0\'dc\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'b7\'b5\'bb\'d8
\f0 NULL
\f1 \'a3\'bb
\f0      \cf4 \
\cf0 2. realloc
\f1 \'ca\'a7\'b0\'dc\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'b2\'bb\'b8\'c4\'b1\'e4\'a3\'ac\'b2\'bb\'bb\'e1\'ca\'cd\'b7\'c5\'d2\'b2\'b2\'bb\'bb\'e1\'d2\'c6\'b6\'af       \
	ptr  =  (int *)realloc(p,size)\'a3\'bb
\f0 \
3. 
\f1 \'bc\'d9\'c8\'e7\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'ba\'f3\'c3\'e6\'bb\'b9\'d3\'d0\'d7\'e3\'b9\'bb\'b6\'e0\'ca\'a3\'d3\'e0\'c4\'da\'b4\'e6\'b5\'c4\'bb\'b0\'a3\'ac
\f0 realloc
\f1 \'b5\'c4\'c4\'da\'b4\'e6
\f0 =
\f1 \'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6
\f0 +
\f1 \'ca\'a3\'d3\'e0\'c4\'da\'b4\'e6
\f0 ,realloc
\f1 \'bb\'b9\'ca\'c7\'b7\'b5\'bb\'d8\'d4\'ad\'c0\'b4\'c4\'da\'b4\'e6\'b5\'c4\'b5\'d8\'d6\'b7
\f0 p
\f1 \'a3\'bb
\f0 \
												\
   
\f1 \'bc\'d9\'c8\'e7\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'ba\'f3\'c3\'e6\'c3\'bb\'d3\'d0\'d7\'e3\'b9\'bb\'b6\'e0\'ca\'a3\'d3\'e0\'c4\'da\'b4\'e6\'b5\'c4\'bb\'b0\'a3\'ac
\f0 realloc
\f1 \'bd\'ab\'c9\'ea\'c7\'eb\'d0\'c2\'b5\'c4\'c4\'da\'b4\'e6\'a3\'ac\'c8\'bb\'ba\'f3\'b0\'d1\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'ca\'fd\'be\'dd\'bf\'bd\'b1\'b4\'b5\'bd\'d0\'c2\'c4\'da\'b4\'e6\'c0\'ef\'a3\'ac\'d4\'ad\'c0\'b4\'b5\'c4\'c4\'da\'b4\'e6\'bd\'ab\'b1\'bb
\f0 free
\f1 \'b5\'f4
\f0 ,realloc
\f1 \'b7\'b5\'bb\'d8\'d0\'c2\'c4\'da\'b4\'e6\'b5\'c4\'b5\'d8\'d6\'b7  ptr != p;\
				\

\f0 4. 
\f1 \'c8\'e7\'b9\'fb
\f0 size
\f1 \'ce\'aa
\f0 0
\f1 \'a3\'ac\'d0\'a7\'b9\'fb\'b5\'c8\'cd\'ac\'d3\'da
\f0 free()
\f1 \'a1\'a3\'d5\'e2\'c0\'ef\'d0\'e8\'d2\'aa\'d7\'a2\'d2\'e2\'b5\'c4\'ca\'c7\'d6\'bb\'b6\'d4\'d6\'b8\'d5\'eb\'b1\'be\'c9\'ed\'bd\'f8\'d0\'d0\'ca\'cd\'b7\'c5    ptr=(int *)realloc(p,0)==free
\f0 \
5. 
\f1 \'b4\'ab\'b5\'dd\'b8\'f8
\f0 realloc
\f1 \'b5\'c4\'d6\'b8\'d5\'eb\'b1\'d8\'d0\'eb\'ca\'c7\'cf\'c8\'c7\'b0\'cd\'a8\'b9\'fd
\f0 malloc()
\f1 \'bb\'f2
\f0 realloc()
\f1 \'b7\'d6\'c5\'e4\'b5\'c4     \
				realloc(p,size)\

\f0 6.
\f1 \'b4\'ab\'b5\'dd\'b8\'f8
\f0 realloc
\f1 \'b5\'c4\'d6\'b8\'d5\'eb\'bf\'c9\'d2\'d4\'ce\'aa\'bf\'d5\'a3\'ac\'b5\'c8\'cd\'ac\'d3\'da
\f0 malloc
\f1 \'a1\'a3\
		  realloc(NULL,size)  <=== >malloc\
\

\f0 7
\f1 \'a1\'a2
\fs48 \'a1\'be\'b9\'e9\'c4\'c9\'a1\'bf
\fs46 \'d3\'c3
\f0 realloc
\f1 \'a3\'ba
\f0 \
		a
\f1 \'a1\'a2\'c0\'a9\'d5\'b9\'bf\'d5\'bc\'e4\'a3\'bb
\f0 \
		b
\f1 \'a1\'a2\'b1\'a3\'b4\'e6\'d6\'ae\'c7\'b0\'b5\'c4\'ca\'fd\'be\'dd\'a1\'a3
\f0\fs48 \
\
=============================================\

\f1 \'b6\'fe\'a1\'a2\'cf\'e0\'b9\'d8\'b8\'c5\'c4\'ee
\f0 :\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf0 \cb4 \'a1\'be\'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'a1\'bf
\f0 \cb1 \
     	
\f1 \'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'b7\'d6\'c5\'e4\'d4\'da\'d5\'bb\'a3\'ac\'be\'b2\'cc\'ac\'b4\'e6\'b4\'a2\'c7\'f8
\f0 (
\f1 \'ca\'fd\'be\'dd\'b6\'ce\'a3\'ac\'d6\'bb\'b6\'c1\'ca\'fd\'be\'dd\'b6\'ce
\f0 )
\f1 \'a3\'ac\'b4\'fa\'c2\'eb\'b6\'ce\'d6\'d0\'a3\'ac\'b7\'d6\'c5\'e4\'d6\'ae\'ba\'f3\'a3\'ac\'d6\'bb\'c4\'dc\'d3\'c9\'cf\'b5\'cd\'b3\'ca\'cd\'b7\'c5\'a1\'a3\'b2\'bb\'c4\'dc\'cd\'a8\'b9\'fd\'b3\'cc\'d0\'f2\'d0\'de\'b8\'c4\'bf\'d5\'bc\'e4\'b5\'c4\'b4\'f3\'d0\'a1\'ba\'cd\'ca\'cd\'b7\'c5\'bf\'d5\'bc\'e4\'a3\'ac\'b3\'c6\'ce\'aa\'be\'b2\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'a1\'a3
\f0 \
\

\f1 \cb4 \'a1\'be\'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'a1\'bf
\f0 \cb1 \
     	
\f1 \'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'b7\'d6\'c5\'e4\'d4\'da\'b6\'d1\'bf\'d5\'bc\'e4\'a3\'ac\'b4\'f3\'d0\'a1\'d3\'c9\'b3\'cc\'d0\'f2\'d4\'b3\'be\'f6\'b6\'a8\'a3\'ac\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b4\'fa\'c2\'eb\'b6\'d4\'bf\'d5\'bc\'e4\'b5\'c4\'b4\'f3\'d0\'a1\'bd\'f8\'d0\'d0\'d0\'de\'b8\'c4\'a3\'ac\'cd\'a8\'b9\'fd\'b4\'fa\'c2\'eb\'b6\'d4\'bf\'d5\'bc\'e4\'bd\'f8\'d0\'d0\'ca\'cd\'b7\'c5\'a1\'a3\'d5\'e2\'d1\'f9\'b7\'d6\'c5\'e4\'b5\'c4\'bf\'d5\'bc\'e4\'b3\'c6\'ce\'aa\'b6\'af\'cc\'ac\'c4\'da\'b4\'e6\'b7\'d6\'c5\'e4\'a1\'a3
\f0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f1 \cf0 \'a1\'be\'d7\'a2\'a1\'bf\'cd\'a8\'b9\'fd
\f0 malloc
\f1 \'ba\'af\'ca\'fd\'b4\'b4\'bd\'a8\'bf\'d5\'bc\'e4\'a3\'ac\'d3\'c3\'b2\'bb\'cd\'ac\'b5\'c4\'d6\'b8\'d5\'eb\'b7\'c3\'ce\'ca\'bf\'d5\'bc\'e4\'a3\'ac\'ca\'b9\'d3\'c3\'bd\'e1\'ca\'f8\'ba\'f3\'d2\'aa\'bc\'b0\'ca\'b1\'ca\'cd\'b7\'c5\'a1\'a3
\f0 \
1
\f1 \'a1\'a2\'c8\'e7\'b9\'fb\'ca\'b9\'d3\'c3\'bd\'e1\'ca\'f8\'ba\'f3\'c3\'bb\'d3\'d0\'bc\'b0\'ca\'b1\'ca\'cd\'b7\'c5\'a3\'ac\'b3\'c6\'ce\'aa\'a1\'be\'c4\'da\'b4\'e6\'d0\'b9\'c2\'b6\'a1\'bf\'a1\'a3
\f0 \
2
\f1 \'a1\'a2\'b5\'b1\'b3\'cc\'d0\'f2\'bd\'e1\'ca\'f8\'ca\'b1\'a3\'ac\'bb\'e1\'ca\'cd\'b7\'c5\'cb\'f9\'d3\'d0\'b5\'c4\'bf\'d5\'bc\'e4\'a3\'ac\'b0\'fc\'c0\'a8\'b6\'d1\'bf\'d5\'bc\'e4\'a1\'a3\
	 \'b5\'ab\'ca\'c7\'ba\'dc\'b6\'e0\'b3\'cc\'d0\'f2\'b2\'bb\'be\'ad\'b3\'a3\'b9\'d8\'b1\'d5
\f0 ; 
\f1 \'cb\'f9\'d2\'d4\'d2\'aa\'d1\'f8\'b3\'c9\'ca\'d6\'b6\'af\'ca\'cd\'b7\'c5\'b6\'d1\'c4\'da\'b4\'e6\'b5\'c4\'ba\'c3\'cf\'b0\'b9\'df\'a1\'a3
\f0 \
3
\f1 \'a1\'a2\'d2\'bb\'b8\'f6\'b6\'d1\'bf\'d5\'bc\'e4\'d6\'bb\'c4\'dc\'ca\'cd\'b7\'c5\'d2\'bb\'b4\'ce\'a3\'ac\'b6\'e0\'ca\'cd\'b7\'c5\'bb\'e1\'b5\'bc\'d6\'c2\'b1\'c0\'c0\'a3\'a3\'ac\'b3\'c6\'ce\'aa\'a1\'be\'d6\'d8\'b8\'b4\'ca\'cd\'b7\'c5\'a1\'bf\'a1\'a3
\f0 \
\
\

\f1\fs46 \'c8\'fd\'a1\'a2\'b6\'d1\'ba\'cd\'d5\'bb\'b5\'c4\'c7\'f8\'b1\'f0\'bf\'c9\'d2\'d4\'d3\'c3\'c8\'e7\'cf\'c2\'b5\'c4\'b1\'c8\'d3\'f7\'c0\'b4\'bf\'b4\'b3\'f6\'a3\'ba
\f0  \

\f1 1\'a3\'a9\'ca\'b9\'d3\'c3\'d5\'bb\'be\'cd\'cf\'f3\'ce\'d2\'c3\'c7\'c8\'a5\'b7\'b9\'b9\'dd\'c0\'ef\'b3\'d4\'b7\'b9\'a3\'ac\'d6\'bb\'b9\'dc\'b5\'e3\'b2\'cb\'a3\'a8\'b7\'a2\'b3\'f6\'c9\'ea\'c7\'eb\'a3\'a9\'a1\'a2\'b8\'b6\'c7\'ae\'a1\'a2\'ba\'cd\'b3\'d4\'a3\'a8\'ca\'b9\'d3\'c3\'a3\'a9\'a3\'ac\'b3\'d4\'b1\'a5\'c1\'cb\'be\'cd
\f0  
\f1 \'d7\'df\'a3\'ac\'b2\'bb\'b1\'d8\'c0\'ed\'bb\'e1\'c7\'d0\'b2\'cb\'a1\'a2\'cf\'b4\'b2\'cb\'b5\'c8\'d7\'bc\'b1\'b8\'b9\'a4\'d7\'f7\'ba\'cd\'cf\'b4\'cd\'eb\'a1\'a2\'cb\'a2\'b9\'f8\'b5\'c8\'c9\'a8\'ce\'b2\'b9\'a4\'d7\'f7\'a3\'ac\'cb\'fb\'b5\'c4\'ba\'c3\'b4\'a6\'ca\'c7\'bf\'ec\'bd\'dd\'a3\'ac\'b5\'ab\'ca\'c7\'d7\'d4\'d3\'c9\'b6\'c8\'d0\'a1\'a1\'a3
\f0  \
\

\f1 2\'a3\'a9\'ca\'b9\'d3\'c3\'b6\'d1\'be\'cd\'cf\'f3\'ca\'c7\'d7\'d4\'bc\'ba\'b6\'af\'ca\'d6\'d7\'f6\'cf\'b2\'bb\'b6\'b3\'d4\'b5\'c4\'b2\'cb\'eb\'c8\'a3\'ac\'b1\'c8\'bd\'cf\'c2\'e9\'b7\'b3\'a3\'ac\'b5\'ab\'ca\'c7\'b1\'c8\'bd\'cf\'b7\'fb\'ba\'cf\'d7\'d4\'bc\'ba\'b5\'c4\'bf\'da\'ce\'b6\'a3\'ac\'b6\'f8\'c7\'d2\'d7\'d4\'d3\'c9\'b6\'c8\'b4\'f3\'a1\'a3\
\

\f0\fs48 ========================over==========================\
\
\
\
}